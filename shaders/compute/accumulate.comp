#version 460

#include "../lib/uniform_bindings.glsl"
#include "../lib/conversions.glsl"
#include "../lib/sampling.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 1, binding = 0, rgba32f) uniform image2D rtResult;
layout(set = 1, binding = 1) uniform sampler2D prevAccumulation;
layout(set = 1, binding = 2, rgba32f) uniform image2D accumulation;
layout(set = 1, binding = 3) uniform sampler2D prevDepth;

void main() {
    ivec2 size = imageSize(rtResult);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixel + 0.5) / vec2(size);
    vec4 result = imageLoad(rtResult, pixel);
    vec3 radiance = result.rgb;
    float apparentDepth = result.w;

    vec3 view = screenToView(uni.projInverse, uv, apparentDepth);
    vec3 world = (uni.viewInverse * vec4(view, 1.0)).xyz;
    vec3 prevView = (prev.view * vec4(world, 1.0)).xyz;
    vec4 prevClip = prev.proj * vec4(prevView, 1.0);
    if (clamp(prevClip.xyz, -prevClip.w, prevClip.w) != prevClip.xyz) {
        imageStore(accumulation, pixel, vec4(radiance, 1.0));
        return;
    }
    vec3 prevScreen = prevClip.xyz / prevClip.w * 0.5 + 0.5;

    vec4 prevRadiance = texture(prevAccumulation, prevScreen.xy);
    float prevApparentDepth = texture(prevDepth, prevScreen.xy).r;

    vec3 reprojectedView = screenToView(prev.projInverse, prevScreen.xy, prevApparentDepth);

    if (distance(prevView, reprojectedView) > 0.1) {
        imageStore(accumulation, pixel, vec4(radiance, 1.0));
        return;
    }
    float newWeight = min(prevRadiance.w + 1.0, 500.0);
    vec3 blended = mix(prevRadiance.rgb, radiance, 1.0 / newWeight);
    if (any(isnan(blended))) {
        blended = radiance;
        newWeight = 1.0;
    }
    imageStore(accumulation, pixel, vec4(blended, newWeight));
}