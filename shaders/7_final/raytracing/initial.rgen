#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "../lib/uniform_bindings.glsl"
#include "../rt/bindings.glsl"

#include "../lib/payload.glsl"
#include "../lib/rand.glsl"
#include "../lib/brdf2.glsl"
#include "../lib/conversions.glsl"
#include "../lib/material.glsl"
#include "../lib/tonemap.glsl"
#include "../lib/colors.glsl"
#include "../lib/utils.glsl"

layout(set = 1, binding = 0, rgba32f) uniform image2D gPosition;
layout(set = 1, binding = 1, rgba32f) uniform image2D gBaseColor;
layout(set = 1, binding = 2, rgba32f) uniform image2D gEmission;
layout(set = 1, binding = 3, rgba32f) uniform image2D gNormal;
layout(set = 1, binding = 4, rgba8) uniform image2D gRoughnessMetalnessSky;

layout(location = 0) rayPayloadEXT Payload payload;

void main() {
	ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    uvec2 resolution = uvec2(gl_LaunchSizeEXT.y);
    uint state = initRNG(uvec2(pixel), resolution, uni.frame);

	vec2 uv = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy);
    uv.y = 1.0 - uv.y;
    vec3 viewPos = screenToView(uni.projInverse, uv, 1.0);

    vec3 origin = uni.viewInverse[3].xyz;
    vec3 direction = mat3(uni.viewInverse) * normalize(viewPos);

    payload.dist = -1.0;
    traceRayEXT(
        tlas,
        gl_RayFlagsNoneEXT, 
        0xFF, // mask
        0,	  // sbtRecordOffset
        0,	  // sbtRecordStride
        0,	  // missIndex
        origin,
        0.001,
        direction,
        256.0,
        0					
    );

    if (payload.dist < 0.0) {
        imageStore(gPosition, pixel, vec4(0.0));
        imageStore(gBaseColor, pixel, vec4(0.0));
        imageStore(gEmission, pixel, vec4(0.0));
        imageStore(gNormal, pixel, vec4(0.0));
        imageStore(gRoughnessMetalnessSky, pixel, vec4(
            0.0,
            0.0,
            1.0,
            0.0
        ));
    } else {
        imageStore(gPosition, pixel, vec4(origin + direction * payload.dist, 0.0));
        imageStore(gBaseColor, pixel, vec4(payload.material.baseColor, 0.0));
        imageStore(gEmission, pixel, vec4(payload.material.emission, 0.0));
        imageStore(gNormal, pixel, vec4(payload.normal, 0.0));
        imageStore(gRoughnessMetalnessSky, pixel, vec4(
            payload.material.roughness,
            payload.material.metalness,
            0.0,
            0.0
        ));
    }
    
}