#version 460

#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 8, local_size_y = 8) in;

#include "../lib/spherical_harmonics.glsl"
#include "../lib/colors.glsl"
#include "../lib/utils.glsl"

layout(set = 1, binding = 0, rgba32f) uniform image2D diffuseSH[];
layout(set = 1, binding = 1, rgba32f) uniform image2D swap[];

layout(constant_id = 0) const int stepSize = 1;

const float KERNEL[] = float[](
    1.0 / 16.0, 1.0 / 4.0, 3.0 / 8.0, 1.0 / 4.0, 1.0 / 16.0
);

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(diffuseSH[0]);

    float totalWeight = 0.0;
    SH result;
    for (int i = 0; i < SH_COEFF_COUNT; i++) {
        result.coeffs[i] = vec3(0.0);
    }

    for (int dx = -2; dx <= 2; dx++) {
        for (int dy = -2; dy <= 2; dy++) {
            ivec2 coord = pixel + ivec2(dx, dy) * stepSize;
            if (coord.x < 0 || coord.y < 0 || coord.x >= size.x || coord.y >= size.y) {
                continue;
            }
            float weight = KERNEL[dx + 2] * KERNEL[dy + 2];
            for (int i = 0; i < SH_COEFF_COUNT; i++) {
                vec3 coeff = imageLoad(diffuseSH[i], coord).rgb;
                if (isNanVec(coeff))
                    continue;
                result.coeffs[i] += coeff * weight;
            }
            totalWeight += weight;
        }
    }
    
    float frames = imageLoad(diffuseSH[0], pixel).a;
    for (int i = 0; i < SH_COEFF_COUNT; i++) {
        imageStore(swap[i], pixel, vec4(result.coeffs[i] / totalWeight, frames));
    }
}