#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "../lib/uniform_bindings.glsl"
#include "../rt/bindings.glsl"

#include "../lib/payload.glsl"
#include "../lib/rand.glsl"
#include "../lib/brdf2.glsl"
#include "../lib/conversions.glsl"
#include "../lib/material.glsl"
#include "../lib/tonemap.glsl"
#include "../lib/colors.glsl"
#include "../lib/utils.glsl"

layout(set = 1, binding = 0, rgba32f) uniform image2D accumulation;
layout(set = 1, binding = 1, rgba8) uniform image2D outImage;

layout(location = 0) rayPayloadEXT Payload payload;

void main() {
	ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    bool right = pixel.x > 960;
    ivec2 originalPixel = pixel;
    pixel.x %= 960;
    uvec2 resolution = uvec2(gl_LaunchSizeEXT.y);
    uint state = initRNG(uvec2(pixel), resolution, uni.frame);

	vec2 uv = vec2(pixel) / vec2(gl_LaunchSizeEXT.xy);
    uv.y = 1.0 - uv.y;
    vec3 viewPos = screenToView(uni.projInverse, uv, 1.0);

    vec3 origin = uni.viewInverse[3].xyz;
    vec3 direction = mat3(uni.viewInverse) * normalize(viewPos);

    vec3 throughput = vec3(1.0);
    vec3 radiance = vec3(0.0);
    bool inside = false;

    float smoothnessFactor = 1.0;
    for (int i = 0; i < 3; i++) {
        payload.dist = -1.0;
        traceRayEXT(
            tlas,
            gl_RayFlagsNoneEXT, 
            0xFF,               // mask
            0,					// sbtRecordOffset
            0,					// sbtRecordStride
            0,					// missIndex
            origin,
            0.001,
            direction,
            256.0,
            0					// payloadLocation
        );

        if (payload.dist < 0.0) {
            // Sky
            radiance += throughput * SKY_COLOR;
            break;
        }

        Material material = payload.material;
        vec3 normal = payload.normal;
    
        radiance += throughput * material.emission;

        vec3 brdf;
        float pdf;
        if (right) {
            float specularChance = evaluateSpecularProbability(material, -direction, normal);
            if (randFloat(state) < specularChance) {
                BRDFSample samp = sampleSpecular(state, material, normal, -direction);
                brdf = samp.brdf;
                pdf = specularChance;
                direction = samp.direction;
                if (!samp.valid) {
                    brdf = vec3(0.0);
                }
            } else {
                BRDFSample samp = sampleDiffuse(state, material, normal);
                brdf = samp.brdf;
                pdf = 1.0 - specularChance;
                direction = samp.direction;
            }
        } else {
            pdf = 1.0 / (2.0 * PI);
            vec3 nextDir = payload.tbn * sampleUniformHemisphere(state);
            brdf = brdfDirect(material, payload.normal, -direction, nextDir);
            direction = nextDir;
        }
        
        vec3 hitPosition = origin + direction * payload.dist;
        throughput *= brdf / pdf;
        origin = hitPosition + normal * 0.01;
    }
    vec4 previous = imageLoad(accumulation, originalPixel);
    vec4 value;

    if (isNanVec(radiance)) {
        value = previous;
    } else if (!moved(uni.view, prev.view)) {
        value = vec4(
            mix(previous.rgb, radiance, 1.0 / (previous.a + 1.0)),
            previous.a + 1.0
        );
    } else {
        value = vec4(radiance, 1.0);
    }
    imageStore(accumulation, originalPixel, value);
    imageStore(outImage, originalPixel, vec4(tonemap(value.rgb), 1.0));
}